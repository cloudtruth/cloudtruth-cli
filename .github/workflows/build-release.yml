---
name: Build Release
run-name: Build Release (${{ inputs.releaseVersion }})
on:
  workflow_call:
    inputs:
      releaseId:
        description: 'Release ID returned by create-release action'
        type: string
        required: true
      releaseUploadUrl:
        description: 'Release Upload Url returned by create-release action'
        type: string
        required: true
      releaseTag:
        description: 'Release tag used for GitHub asset files.'
        type: string
        default: ${{ github.ref_name }}
      packageVersion:
        description: 'Numeric version string to use for package managers.'
        type: string
        default: ${{ github.ref_name }}
      debRevision:
        description: Additional alphanumeric revision string used for Debian packages.
        type: string
      rpmSnapshot:
        description: Alphanumeric snapshot string to add to end of RPM version.
        type: string
env:
  CI: true
  RELEASE_UPLOAD_URL: ${{ inputs.releaseUploadUrl }}
  RELEASE_TAG: ${{ inputs.releaseTag }}
  PACKAGE_VERSION: ${{ inputs.packageVersion }}
  DEB_REVISION: ${{ inputs.revision }}
  RPM_SNAPSHOT: ${{ inputs.rpmSnapshot }}
  PROJECT_NAME: cloudtruth
  RUST_BACKTRACE: 1

jobs:
  matrix-map:
    name: Read Job Matrices
    runs-on: ubuntu-latest
    outputs:
      matrices: ${{ steps.matrix-map.outputs.matrices }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: matrix-map
        run: |
          JSON_FILE=ci/gh-actions/build-release.json
          echo "matrices=$(cat $JSON_FILE)" >> $GITHUB_OUTPUT

  build-release-linux:
    name: Linux
    runs-on: ubuntu-latest
    needs: [ matrix-map ]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-map.outputs.matrices).ubuntu-latest }}

    env:
      TARGET: ${{ matrix.target }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - run: ci/scripts/install-build-packages-linux.sh

      - run: ci/scripts/install-rust.sh

      - run: rustup target add "$TARGET"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v0-cloudtruth-cli
          shared-key: ${{ runner.os }}-${{ env.TARGET }}
          cache-directories: ${{ env.HOME }}/.cargo/bin

      - uses: taiki-e/install-action@cargo-binstall

      - name: Install cross
        run: cargo binstall --no-confirm --force cross

      - name: Build
        run: cross build --release --target $TARGET

      - name: Install cargo-deb
        run: cargo binstall --no-confirm --force --strategies 'quick-install,crate-meta-data,compile' cargo-deb

      - name: Strip binaries
        run: ci/scripts/strip.sh

      - name: Build archive
        run: ci/scripts/build-release-archive.sh

      - name: Upload release archive
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Build Debian package
        run: ci/scripts/build-debian-package.sh

      - name: Upload Debian package
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.DEB_PATH }}
          asset_name: ${{ env.DEB_NAME }}
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Install cargo-generate-rpm
        run: cargo install cargo-generate-rpm

      - name: Build RPM package
        run: ci/scripts/build-rpm-package.sh

      - name: Upload RPM package
        if: contains(matrix.build, 'linux')
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.RPM_PATH }}
          asset_name: ${{ env.RPM_NAME }}
          asset_content_type: application/octet-stream
          overwrite: true

  build-release-macos:
    name: MacOS
    runs-on: macos-latest
    needs: [ matrix-map ]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-map.outputs.matrices).macos-latest }}

    env:
      TARGET: ${{ matrix.target }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - run: ci/scripts/install-rust.sh

      - run: rustup target add "$TARGET"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v0-cloudtruth-cli
          shared-key: ${{ runner.os }}-${{ env.TARGET }}
          cache-directories: ${{ env.HOME }}/.cargo/bin

      - name: Build
        run: cargo build --release --target $TARGET

      - name: Strip binaries
        run: ci/scripts/strip.sh

      - name: Build archive
        run: ci/scripts/build-release-archive.sh

      - name: Upload release archive
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
          overwrite: true

  build-release-windows:
    name: Windows
    runs-on: windows-latest
    needs: [ matrix-map ]
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-map.outputs.matrices).windows-latest }}

    env:
      TARGET: ${{ matrix.target }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - run: ci/scripts/install-rust.sh

      - run: rustup target add "$TARGET"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v0-cloudtruth-cli
          shared-key: ${{ runner.os }}-${{ env.TARGET }}
          cache-directories: ${{ env.HOME }}/.cargo/bin

      - name: Build
        run: cargo build --release --target $TARGET

      - name: Build archive
        run: ci/scripts/build-release-archive.sh

      - name: Upload release archive
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
          overwrite: true

  upload-assets:
    name: Upload Other Assets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Upload Release Notes
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: CHANGELOG.md
          asset_name: CHANGELOG.md
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Upload POSIX Install
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: install.sh
          asset_name: install.sh
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Upload Windows Install
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: install.ps1
          asset_name: install.ps1
          asset_content_type: application/octet-stream
          overwrite: true

