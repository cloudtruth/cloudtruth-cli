# The release steps here pull heavily from the GitHub Actions configuration for the bat and ripgrep projects.
#
# bat: https://github.com/sharkdp/bat
# The MIT License (MIT)
#
# Copyright (c) 2018-2020 bat-developers (https://github.com/sharkdp/bat).
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ripgrep: https://github.com/BurntSushi/ripgrep
# The MIT License (MIT)
#
# Copyright (c) 2015 Andrew Gallant
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
---
name: Build Release
run-name: Build Release (${{ inputs.releaseVersion }})
on:
  workflow_call:
    inputs:
      releaseId:
        description: 'Release ID returned by create-release action'
        type: string
        required: true
      releaseUploadUrl:
        description: 'Release Upload Url returned by create-release action'
        type: string
        required: true
      releaseTag:
        description: 'Release tag used for GitHub asset files.'
        type: string
        default: ${{ github.ref_name }}
      packageVersion:
        description: 'Numeric version string to use for package managers.'
        type: string
        default: ${{ github.ref_name }}
      debRevision:
        description: Additional alphanumeric revision string used for Debian packages.
        type: string
      rpmSnapshot:
        description: Alphanumeric snapshot string to add to end of RPM version.
        type: string
env:
  CI: true
  RELEASE_UPLOAD_URL: ${{ inputs.releaseUploadUrl }}
  RELEASE_TAG: ${{ inputs.releaseTag }}
  PACKAGE_VERSION: ${{ inputs.packageVersion }}
  DEB_REVISION: ${{ inputs.revision }}
  RPM_SNAPSHOT: ${{ inputs.rpmSnapshot }}
  PROJECT_NAME: cloudtruth
  RUST_BACKTRACE: 1

jobs:
  matrix-map:
    runs-on: ubuntu-latest
    outputs:
      matrices: ${{ steps.read-matrix-map.outputs.matrices }}
    steps:
      - id: matrix-map
        run: |
          JSON_FILE=ci/gh-actions/build-release.json
          echo "matrices=$(cat $JSON_FILE)" >> .GITHUB_OUTPUT

  build-packages:
    name: Build Release Packages
    runs-on: ${{ matrix.os }}
    needs: [ matrix-map ]

    strategy:
      fail-fast: false
      matrix: ${{ FromJSON(needs.matrix-map.outputs.matrices).ubuntu-latest }}

    env:
      TARGET: $TARGET

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - run: ci/scripts/install-build-packages-linux.sh

      - run: ci/scripts/install-rust.sh

      - run: rustup target add $TARGET

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v0-cloudtruth-cli
          shared-key: ${{ runner.os }}-$TARGET
          cache-directories: ${{ env.HOME }}/.cargo/bin

      - uses: taiki-e/install-action@cargo-binstall

      - name: Install cross
        run: cargo binstall --no-confirm --force cross

      - name: Build
        run: cross build --release --target $TARGET

      - name: Install cargo-deb
        run: cargo binstall --no-confirm --force --strategies 'quick-install,crate-meta-data,compile' cargo-deb

      - name: Get pre-stripped binary size
        run: ls -lh target/$TARGET/release/

      - name: Strip binaries
        run: |
          STRIP=$(ci/scripts/get-strip.sh)
          "$STRIP" "target/$TARGET/release/$PROJECT_NAME"

      - name: Get post-stripped binary size
        run: ls -lh target/$TARGET/release/

      - name: Build archive
        shell: bash
        run: |
          echo "ASSET=$(ci/scripts/build-release-archive.sh)" >> $GITHUB_ENV


      - name: Upload release archive
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Build Debian package
        run: |
          DEB_PATH="$(ci/scripts/build-debian-package.sh)"
          echo "DEB_PATH=$DEB_PATH" >> $GITHUB_ENV
          echo "DEB_NAME=$(basename $DEB_PATH)" >> $GITHUB_ENV

      - name: Upload Debian package
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.DEB_PATH }}
          asset_name: ${{ env.DEB_NAME }}
          asset_content_type: application/octet-stream
          overwrite: true


      - name: Install cargo-generate-rpm
        run: cargo install cargo-generate-rpm

      - name: Build RPM package
        run: |          
          rpm_path="$(ci/scripts/build-rpm-package.sh)"
          echo "RPM_PATH=${rpm_path}" >> $GITHUB_ENV
          echo "RPM_NAME=$(basename $rpm_path)" >> $GITHUB_ENV

      - name: Upload RPM package
        if: contains(matrix.build, 'linux')
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.RPM_PATH }}
          asset_name: ${{ env.RPM_NAME }}
          asset_content_type: application/octet-stream
          overwrite: true


  upload-assets:
    name: Upload Other Assets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Upload Release Notes
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: CHANGELOG.md
          asset_name: CHANGELOG.md
          asset_content_type: application/octet-stream
          overwrite: true


      - name: Upload POSIX Install
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: install.sh
          asset_name: install.sh
          asset_content_type: application/octet-stream
          overwrite: true


      - name: Upload Windows Install
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: install.ps1
          asset_name: install.ps1
          asset_content_type: application/octet-stream
          overwrite: true

