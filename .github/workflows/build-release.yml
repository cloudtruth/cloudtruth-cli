---
name: Build Release
run-name: Build Release (${{ inputs.releaseTag }})
on:
  workflow_call:
    inputs:
      releaseId:
        description: 'Release ID returned by create-release action'
        type: string
        required: true
      releaseUploadUrl:
        description: 'Release Upload Url returned by create-release action'
        type: string
        required: true
      releaseTag:
        description: 'Release tag used for GitHub asset files.'
        type: string
        default: ${{ github.ref_name }}
      packageVersion:
        description: 'Numeric version string to use for package managers.'
        type: string
        default: ${{ github.ref_name }}
      debRevision:
        description: Additional alphanumeric revision string used for Debian packages.
        type: string
      rpmSnapshot:
        description: Alphanumeric snapshot string to add to end of RPM version.
        type: string
env:
  # CI: true
  RELEASE_UPLOAD_URL: ${{ inputs.releaseUploadUrl }}
  RELEASE_TAG: ${{ inputs.releaseTag }}
  PACKAGE_VERSION: ${{ inputs.packageVersion }}
  DEB_REVISION: ${{ inputs.debRevision }}
  RPM_SNAPSHOT: ${{ inputs.rpmSnapshot }}
  PROJECT_NAME: cloudtruth
  RUST_BACKTRACE: 1

jobs:
  matrix:
    name: Read Job Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: matrix
        run: |
          JSON_FILE=cicd/gha-matrices/release-builds.json
          echo "matrix=$(cat $JSON_FILE)" >> $GITHUB_OUTPUT

  build-release:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    needs: [ matrix ]
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}

    env:
      TARGET: ${{ matrix.target }}
      # strip debug info from binaries
      RUSTFLAGS: '-C link-arg=-s'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - run: cicd/scripts/install-rust.sh

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v0-cloudtruth
          shared-key: ${{ env.TARGET }}

      - run: rustup target add "$TARGET"

      - uses: taiki-e/install-action@cargo-binstall
        if: contains(runner.os, 'Linux')

      - name: Install cross
        run: cargo binstall --no-confirm --force cross
        if: contains(runner.os, 'Linux')

      - name: Cross build
        run: cross build --release --target $TARGET --all-features --bin cloudtruth
        if: contains(runner.os, 'Linux')

      - name: Cargo build
        run: cargo build --release --target $TARGET --all-features --bin cloudtruth
        if: ${{ ! contains(runner.os, 'Linux') }}

      - name: Build archive
        run: cicd/scripts/build-release-archive.sh

      - name: Upload release archive
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Create release checksum
        run: cicd/scripts/generate-sha512.sh "$ASSET" ASSET_SHA

      - name: Upload release checksum
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET_SHA }}
          asset_name: ${{ env.ASSET_SHA }}
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Install cargo-deb
        run: cargo binstall --no-confirm --force --strategies 'quick-install,crate-meta-data,compile' cargo-deb
        if: contains(runner.os, 'Linux')

      - name: Build Debian package
        run: cicd/scripts/build-debian-package.sh
        if: contains(runner.os, 'Linux')
        
      - name: Upload Debian package
        uses: shogo82148/actions-upload-release-asset@v1
        if: contains(runner.os, 'Linux')
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.DEB_PATH }}
          asset_name: ${{ env.DEB_NAME }}
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Create Debian package checksum
        if: contains(runner.os, 'Linux')
        run: cicd/scripts/generate-sha512.sh "$DEB_PATH" DEB_SHA

      - name: Upload Debian package checksum
        uses: shogo82148/actions-upload-release-asset@v1
        if: contains(runner.os, 'Linux')
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.DEB_SHA }}
          asset_name: ${{ env.DEB_SHA }}
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Install cargo-generate-rpm
        run: cargo install cargo-generate-rpm
        if: contains(runner.os, 'Linux')

      - name: Build RPM package
        run: cicd/scripts/build-rpm-package.sh
        if: contains(runner.os, 'Linux')

      - name: Upload RPM package
        uses: shogo82148/actions-upload-release-asset@v1
        if: contains(runner.os, 'Linux')
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.RPM_PATH }}
          asset_name: ${{ env.RPM_NAME }}
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Create RPM checksum
        if: contains(runner.os, 'Linux')
        run: cicd/scripts/generate-sha512.sh "$RPM_PATH" RPM_SHA

      - name: Upload RPM package checksum
        uses: shogo82148/actions-upload-release-asset@v1
        if: contains(runner.os, 'Linux')
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.RPM_SHA }}
          asset_name: ${{ env.RPM_SHA }}
          asset_content_type: application/octet-stream
          overwrite: true

  upload-assets:
    name: Upload Other Assets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Upload Release Notes
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: CHANGELOG.md
          asset_name: CHANGELOG.md
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Upload POSIX Install
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: install.sh
          asset_name: install.sh
          asset_content_type: application/octet-stream
          overwrite: true

      - name: Upload Windows Install
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: install.ps1
          asset_name: install.ps1
          asset_content_type: application/octet-stream
          overwrite: true

  build-test-archive:
    name: Build Test Archive
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      ARCHIVE_FILE: integration-test-${{matrix.os}}.tar.zst
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - run: sh cicd/scripts/install-rust.sh

      - uses: taiki-e/install-action@cargo-nextest

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v0-cloudtruth

      - run: cargo nextest archive --cargo-profile release-debug --all-features --tests --archive-file "$ARCHIVE_FILE"

      - name: Upload Integration Test Archive
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ARCHIVE_FILE }}
          asset_name: ${{ env.ARCHIVE_FILE }}
          asset_content_type: application/octet-stream
          overwrite: true

