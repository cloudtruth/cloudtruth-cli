---
name: 'Test Release'
on:
  workflow_call:
    inputs:
      releaseId:
        description: 'Release ID returned by create-release action. This is only needed for draft releases.'
        type: string
      releaseVersion:
        description: 'CLI Release Version (defaults to current tag name)'
        type: string
        default: ${{ github.ref_name }}
      serverUrl:
        description: URL to the CloudTruth server (defaults to production)
        type: string
        default: https://api.cloudtruth.io
    secrets:
      CLOUDTRUTH_API_KEY:
        description: CloudTruth API Key
        required: true
env:
  CI: true

jobs:
  matrix:
    name: Read Job Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: matrix
        run: |
          JSON_FILE=cicd/gha-matrices/release-tests.json
          echo "matrix=$(cat $JSON_FILE)" >> $GITHUB_OUTPUT
  test-release:
    name: ${{ matrix.display_name }} 
    runs-on: ${{ matrix.runner }}
    needs: [ matrix ]
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}

    env:
      # github release info
      CT_DOWNLOAD_RELEASE_ID: ${{ inputs.releaseId }}
      CT_DOWNLOAD_VERSION: ${{ inputs.releaseVersion }}
      
      # Need auth-token to download from draft release
      CT_DOWNLOAD_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # These values are used for running the CLI command
      CLOUDTRUTH_SERVER_URL: ${{ inputs.serverUrl }}
      CLOUDTRUTH_API_KEY: ${{ secrets.CLOUDTRUTH_API_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          
      - name: docker
        if: matrix.install_type == 'docker'
        env:
          CT_DEBUG: ${{ runner.debug }}
        run: |
          set -e
          IMAGE='cloudtruth/${{ matrix.os }}'
          VERSION='${{ matrix.version }}'
          DOCKER_FILE='${{ matrix.dockerfile }}'
          DOCKER_PLATFORM='${{ matrix.platform }}'
          TAG="${IMAGE}:${VERSION}"
          OUT_LOG='docker_build.log'
          # install emulators for ARM if needed
          case "$DOCKER_PLATFORM" in
            *arm64*)
              docker run --privileged --rm tonistiigi/binfmt --install arm64
            ;;
            *arm*)
              docker run --privileged --rm tonistiigi/binfmt --install arm
            ;;
          esac
          docker buildx build . \
            ${DOCKER_PLATFORM:+ --platform "${DOCKER_PLATFORM}"} \
            --build-arg DOWNLOAD_AUTH_TOKEN="${CT_DOWNLOAD_AUTH_TOKEN}" \
            --build-arg DOWNLOAD_RELEASE_ID="${CT_DOWNLOAD_RELEASE_ID}" \
            --build-arg DOWNLOAD_VERSION="${CT_DOWNLOAD_VERSION}" \
            --build-arg INSTALL_PREREQUISITES=1 \
            ${CT_DEBUG:+ --build-arg DEBUG="${CT_DEBUG}"} \
             -f "cicd/docker/${DOCKER_FILE}" \
             -t "$TAG"
          docker run --rm \
            ${DOCKER_PLATFORM:+ --platform "${DOCKER_PLATFORM}"} \
            -i --log-driver=none -a stdout -a stderr \
            -e CLOUDTRUTH_API_KEY \
            ${CLOUDTRUTH_SERVER_URL:+ -e CLOUDTRUTH_SERVER_URL} \
            -v $(pwd):/truth \
            "$TAG" \
            cloudtruth schema server \
          | tee "$OUT_LOG"
     
      - name: install.sh
        if: matrix.install_type == 'shell'
        run: |
          set -e
          sudo ./install.sh \
            --install-prerequisites \
            ${CT_DEBUG:+ --debug} \
            --version "${CT_DOWNLOAD_VERSION}" \
            ${CT_DOWNLOAD_RELEASE_ID:+ --auth-token "${CT_DOWNLOAD_AUTH_TOKEN}" --release-id "${CT_DOWNLOAD_RELEASE_ID}"}
          cloudtruth schema server
     
      - name: install.ps1
        if: matrix.install_type == 'powershell'
        shell: pwsh
        run: |
          $InformationPreference = 'Continue'
          $ErrorActionPreference="Stop"
          $install_opts = @{ version = $ENV:CT_DOWNLOAD_VERSION }
          if ($ENV:CT_DOWNLOAD_RELEASE_ID) { 
              $install_opts['releaseId'] = $ENV:CT_DOWNLOAD_RELEASE_ID
              $install_opts['authToken'] = $ENV:CT_DOWNLOAD_AUTH_TOKEN
          }
          $ctExe = .\install.ps1 @install_opts
          & $ctExe schema server
