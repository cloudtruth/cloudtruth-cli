name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CI: true
  RUST_BACKTRACE: 1
  # This needs to match the RUST_VERSION in create-draft-release.yml.
  RUST_VERSION: 1.54.0

  # These are based on pre-configured integrations in the CLI CI account.
  CLOUDTRUTH_TEST_BROKEN_PROJECT: proj-int-broken
  CLOUDTRUTH_TEST_BROKEN_TEMPLATE: temp-int-broken
  CLOUDTRUTH_TEST_BROKEN_PARAM1: param1
  CLOUDTRUTH_TEST_BROKEN_PARAM2: param2
  CLOUDTRUTH_TEST_BROKEN_PARAM3: param3
  CLOUDTRUTH_TEST_BROKEN_VALUE1: value1
  CLOUDTRUTH_TEST_BROKEN_FQN2: github://rickporter-tuono/hello-world/master/README.md
  CLOUDTRUTH_TEST_BROKEN_FQN3: github://rickporter-tuono/cloudtruth_test/main/README.md

  CLOUDTRUTH_TEST_EXPLORE_FQN: github://rickporter-tuono/cloudtruth_test/main/short.yaml
  CLOUDTRUTH_TEST_EXPLORE_JMES: speicla.POrk_Egg_Foo_Young

  CLOUDTRUTH_TEST_PARAMETERS_FQN: github://rickporter-tuono/cloudtruth_test/my-branch/short.yaml
  CLOUDTRUTH_TEST_PARAMETERS_JMES: speicla.POrk_Egg_Foo_Young

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: ShellCheck
        uses: ludeeus/action-shellcheck@master

      - name: Install Rust
        id: rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          profile: minimal
          override: true
          components: rustfmt, clippy

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ steps.rust.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Show Rust version and platform details
        run: rustc --version --verbose

      - run: cargo fmt --all -- --check

      - uses: actions-rs/clippy-check@v1
        with:
          name: Clippy Check
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features -- -D warnings

  test:
    name: Test
    runs-on: ${{ matrix.os }}

    env:
      # these are to run against staging
      CLOUDTRUTH_SERVER_URL: https://api.staging.cloudtruth.io
      CLOUDTRUTH_API_KEY: ${{ secrets.CI_ACCT_STAGING_CONTRIBUTOR }}
      # below, lets us run against production
      # CLOUDTRUTH_API_KEY: ${{ secrets.CI_ACCT_READWRITE_CT_API_KEY }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Show Rust version and platform details
        run: rustc --version --verbose

      - run: cargo build
      - run: cargo test

      - name: Integration Test - non-Windows
        env:
          OS: ${{ runner.os }}
        if: runner.os != 'Windows'
        run: |
          cd tests/pytest
          python3 live_test.py --job-id "${OS}-${GITHUB_RUN_NUMBER}"

      - name: Integration Test - Windows
        env:
          OS: ${{ runner.os }}
        if: runner.os == 'Windows'
        run: |
          cd tests\pytest
          py live_test.py --job-id "$ENV:OS-$ENV:GITHUB_RUN_NUMBER"
