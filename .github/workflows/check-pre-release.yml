---
on:
  release:
    types: [prereleased]

name: 'Check Pre-Release'

jobs:
  test-alpine:
    runs-on: ubuntu-latest
    env:
      # These values are used for running the CLI command
      CLOUDTRUTH_API_KEY: ${{ secrets.CI_ACCT_READONLY_CT_API_KEY }}
      CT_TEST_PROJECT: TruthStrap
      CT_TEST_PARAM: INTEGRATION_TEST_RESULT
      CT_TEST_VALUE: Speicla

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get the release version from the tag
        if: env.CT_VERSION == ''
        run: |
          echo CT_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: alpine-3.13
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.alpine-3.13 \
             -t cloudtruth:alpine-3.13
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:alpine-3.13 cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

      - name: alpine-3.12
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.alpine-3.12 \
             -t cloudtruth:alpine-3.12
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:alpine-3.12 cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

  test-centos:
    runs-on: ubuntu-latest
    env:
      # These values are used for running the CLI command
      CLOUDTRUTH_API_KEY: ${{ secrets.CI_ACCT_READONLY_CT_API_KEY }}
      CT_TEST_PROJECT: TruthStrap
      CT_TEST_PARAM: INTEGRATION_TEST_RESULT
      CT_TEST_VALUE: Speicla

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get the release version from the tag
        if: env.CT_VERSION == ''
        run: |
          echo CT_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: centos-8
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.centos-8 \
             -t cloudtruth:centos-8
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:centos-8 cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

      - name: centos-7
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.centos-7 \
             -t cloudtruth:centos-7
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:centos-7 cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

  test-debian:
    runs-on: ubuntu-latest
    env:
      # These values are used for running the CLI command
      CLOUDTRUTH_API_KEY: ${{ secrets.CI_ACCT_READONLY_CT_API_KEY }}
      CT_TEST_PROJECT: TruthStrap
      CT_TEST_PARAM: INTEGRATION_TEST_RESULT
      CT_TEST_VALUE: Speicla

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get the release version from the tag
        if: env.CT_VERSION == ''
        run: |
          echo CT_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: debian-bullseye-slim
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.debian-bullseye-slim \
             -t cloudtruth:debian-bullseye-slim
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:debian-bullseye-slim cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

      - name: debian-buster-slim
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.debian-buster-slim \
             -t cloudtruth:debian-buster-slim
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:debian-buster-slim cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

      - name: debian-jessie-slim
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.debian-jessie-slim \
             -t cloudtruth:debian-jessie-slim
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:debian-jessie-slim cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

  test-macOS:
    runs-on: macOS-latest
    env:
      # These values are used for running the CLI command
      CLOUDTRUTH_API_KEY: ${{ secrets.CI_ACCT_READONLY_CT_API_KEY }}
      CT_TEST_PROJECT: TruthStrap
      CT_TEST_PARAM: INTEGRATION_TEST_RESULT
      CT_TEST_VALUE: Speicla

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get the release version from the tag
        if: env.CT_VERSION == ''
        run: |
          echo CT_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: macOS-latest
        run: |
          sudo ./install.sh --version "${CT_VERSION}"
          cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep "${CT_TEST_PARAM}" | grep "${CT_TEST_VALUE}"

  test-ubuntu:
    runs-on: ubuntu-latest
    env:
      # These values are used for running the CLI command
      CLOUDTRUTH_API_KEY: ${{ secrets.CI_ACCT_READONLY_CT_API_KEY }}
      CT_TEST_PROJECT: TruthStrap
      CT_TEST_PARAM: INTEGRATION_TEST_RESULT
      CT_TEST_VALUE: Speicla

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get the release version from the tag
        if: env.CT_VERSION == ''
        run: |
          echo CT_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: ubuntu-groovy
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.ubuntu-groovy \
             -t cloudtruth:ubuntu-groovy
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:ubuntu-groovy cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

      - name: ubuntu-focal
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.ubuntu-focal \
             -t cloudtruth:ubuntu-focal
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:ubuntu-focal cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

      - name: ubuntu-bionic
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.ubuntu-bionic \
             -t cloudtruth:ubuntu-bionic
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:ubuntu-bionic cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

      - name: ubuntu-xenial
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.ubuntu-xenial \
             -t cloudtruth:ubuntu-xenial
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:ubuntu-xenial cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

      - name: ubuntu-trusty
        run: |
          docker build . \
            --build-arg DOWNLOAD_VERSION="${CT_VERSION}" \
             -f tests/docker/prerelease/Dockerfile.ubuntu-trusty \
             -t cloudtruth:ubuntu-trusty
          docker run -e CLOUDTRUTH_API_KEY -t cloudtruth:ubuntu-trusty cloudtruth --project ${CT_TEST_PROJECT} parameters list -v | grep ${CT_TEST_PARAM} | grep ${CT_TEST_VALUE}

  test-windows:
    runs-on: windows-latest
    env:
      # These values are used for running the CLI command
      CLOUDTRUTH_API_KEY: ${{ secrets.CI_ACCT_READONLY_CT_API_KEY }}
      CT_TEST_PROJECT: TruthStrap
      CT_TEST_PARAM: INTEGRATION_TEST_RESULT
      CT_TEST_VALUE: Speicla

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get the release version from the tag
        if: env.CT_VERSION == ''
        run: |
          echo CT_VERSION=${GITHUB_REF#refs/tags/} >> $GITHUB_ENV

      - name: Set Windows CT_VERSION variable
        id: win_ct_ver
        run: |
            echo "::set-output name=ct_version::${GITHUB_REF#refs/tags/}"

      - name: windows-latest
        shell: pwsh
        env:
          CT_VERSION: ${{ steps.win_ct_ver.output.ct_version }}
        run: |
          $InformationPreference = 'Continue'
          New-Alias grep findstr
          $ctExe = .\install.ps1 -version "$ENV:CT_VERSION"
          & $ctExe --project "$ENV:CT_TEST_PROJECT" parameters list -v | grep "$ENV:CT_TEST_PARAM" | grep "$ENV:CT_TEST_VALUE"
