/*
 * CloudTruth Management API
 *
 * CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cloudtruth.com
 * Generated by: https://openapi-generator.tech
 */

/// BackupParameter : Parameter, rule, and value data at a point in time.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BackupParameter {
    #[serde(rename = "rules")]
    pub rules: ::std::collections::HashMap<String, crate::models::BackupParameterRule>,
    #[serde(rename = "values")]
    pub values: ::std::collections::HashMap<String, crate::models::BackupParameterValue>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "param_type")]
    pub param_type: String,
    #[serde(rename = "project")]
    pub project: String,
    #[serde(rename = "secret")]
    pub secret: bool,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

impl BackupParameter {
    /// Parameter, rule, and value data at a point in time.
    pub fn new(rules: ::std::collections::HashMap<String, crate::models::BackupParameterRule>, values: ::std::collections::HashMap<String, crate::models::BackupParameterValue>, name: String, param_type: String, project: String, secret: bool) -> BackupParameter {
        BackupParameter {
            rules,
            values,
            name,
            param_type,
            project,
            secret,
            description: None,
        }
    }
}


