/*
 * CloudTruth Management API
 *
 * CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cloudtruth.com
 * Generated by: https://openapi-generator.tech
 */

use regex::Regex;

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method `projects_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_destroy`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsDestroyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameter_export_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParameterExportListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_destroy`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersDestroyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersPartialUpdateError {
    Status400(),
    Status404(),
    Status422(),
    Status415(),
    Status507(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_retrieve`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersRetrieveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersUpdateError {
    Status400(),
    Status404(),
    Status422(),
    Status415(),
    Status507(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_values_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersValuesCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_values_destroy`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersValuesDestroyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_values_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersValuesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_values_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersValuesPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_values_retrieve`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersValuesRetrieveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_parameters_values_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsParametersValuesUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_retrieve`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsRetrieveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_template_preview_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsTemplatePreviewCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_templates_create`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsTemplatesCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_templates_destroy`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsTemplatesDestroyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_templates_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsTemplatesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_templates_partial_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsTemplatesPartialUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_templates_retrieve`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsTemplatesRetrieveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_templates_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsTemplatesUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `projects_update`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsUpdateError {
    UnknownValue(serde_json::Value),
}

fn remove_null_values(input: &str) -> String {
    let re = Regex::new(r#""values":\{"https://\S+/":null\}"#).unwrap();
    re.replace_all(input, "\"values\":{}").to_string()
}

pub fn projects_create(
    configuration: &mut configuration::Configuration,
    project_create: crate::models::ProjectCreate,
) -> Result<crate::models::Project, Error<ProjectsCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&project_create);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_destroy(
    configuration: &mut configuration::Configuration,
    id: &str,
) -> Result<(), Error<ProjectsDestroyError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ProjectsDestroyError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_list(
    configuration: &mut configuration::Configuration,
    name: Option<&str>,
    page: Option<i32>,
) -> Result<crate::models::PaginatedProjectList, Error<ProjectsListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Exports all parameters in this project in the requested format.  Parameter names and values will be coerced to the proper format (e.g. for a dotenv export, my_parameter will be capitalized to MY_PARAMETER and its value will be in a quoted string).  Note that capitalization is the only name coercion that will be performed on parameter names, names that are invalid for a given format will be omitted.
pub fn projects_parameter_export_list(
    configuration: &mut configuration::Configuration,
    project_pk: &str,
    contains: Option<&str>,
    endswith: Option<&str>,
    environment: Option<&str>,
    explicit_export: Option<bool>,
    mask_secrets: Option<bool>,
    output: Option<&str>,
    page: Option<i32>,
    startswith: Option<&str>,
    wrap: Option<bool>,
) -> Result<crate::models::ParameterExport, Error<ProjectsParameterExportListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameter-export/",
        configuration.base_path,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = contains {
        local_var_req_builder =
            local_var_req_builder.query(&[("contains", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = endswith {
        local_var_req_builder =
            local_var_req_builder.query(&[("endswith", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = environment {
        local_var_req_builder =
            local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = explicit_export {
        local_var_req_builder =
            local_var_req_builder.query(&[("explicit_export", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mask_secrets {
        local_var_req_builder =
            local_var_req_builder.query(&[("mask_secrets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = output {
        local_var_req_builder =
            local_var_req_builder.query(&[("output", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = startswith {
        local_var_req_builder =
            local_var_req_builder.query(&[("startswith", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wrap {
        local_var_req_builder =
            local_var_req_builder.query(&[("wrap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParameterExportListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_parameters_create(
    configuration: &mut configuration::Configuration,
    project_pk: &str,
    parameter_create: crate::models::ParameterCreate,
) -> Result<crate::models::Parameter, Error<ProjectsParametersCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/",
        configuration.base_path,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&parameter_create);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&remove_null_values(&local_var_content)).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParametersCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_parameters_destroy(
    configuration: &mut configuration::Configuration,
    id: &str,
    project_pk: &str,
) -> Result<(), Error<ProjectsParametersDestroyError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/{id}/",
        configuration.base_path,
        id = id,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ProjectsParametersDestroyError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_parameters_list(
    configuration: &mut configuration::Configuration,
    project_pk: &str,
    environment: Option<&str>,
    mask_secrets: Option<bool>,
    name: Option<&str>,
    page: Option<i32>,
    wrap: Option<bool>,
) -> Result<crate::models::PaginatedParameterList, Error<ProjectsParametersListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/",
        configuration.base_path,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = environment {
        local_var_req_builder =
            local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mask_secrets {
        local_var_req_builder =
            local_var_req_builder.query(&[("mask_secrets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wrap {
        local_var_req_builder =
            local_var_req_builder.query(&[("wrap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&remove_null_values(&local_var_content)).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParametersListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_parameters_partial_update(
    configuration: &mut configuration::Configuration,
    id: &str,
    project_pk: &str,
    patched_parameter: Option<crate::models::PatchedParameter>,
) -> Result<crate::models::Parameter, Error<ProjectsParametersPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/{id}/",
        configuration.base_path,
        id = id,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&patched_parameter);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&remove_null_values(&local_var_content)).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParametersPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_parameters_retrieve(
    configuration: &mut configuration::Configuration,
    id: &str,
    project_pk: &str,
    environment: Option<&str>,
    mask_secrets: Option<bool>,
    wrap: Option<bool>,
) -> Result<crate::models::Parameter, Error<ProjectsParametersRetrieveError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/{id}/",
        configuration.base_path,
        id = id,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = environment {
        local_var_req_builder =
            local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mask_secrets {
        local_var_req_builder =
            local_var_req_builder.query(&[("mask_secrets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wrap {
        local_var_req_builder =
            local_var_req_builder.query(&[("wrap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&remove_null_values(&local_var_content)).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParametersRetrieveError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_parameters_update(
    configuration: &mut configuration::Configuration,
    id: &str,
    project_pk: &str,
    parameter: crate::models::Parameter,
) -> Result<crate::models::Parameter, Error<ProjectsParametersUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/{id}/",
        configuration.base_path,
        id = id,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&parameter);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&remove_null_values(&local_var_content)).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParametersUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the value of a parameter in an environment.
pub fn projects_parameters_values_create(
    configuration: &mut configuration::Configuration,
    parameter_pk: &str,
    project_pk: &str,
    value_create: crate::models::ValueCreate,
    wrap: Option<bool>,
) -> Result<crate::models::Value, Error<ProjectsParametersValuesCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/{parameter_pk}/values/",
        configuration.base_path,
        parameter_pk = parameter_pk,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = wrap {
        local_var_req_builder =
            local_var_req_builder.query(&[("wrap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&value_create);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParametersValuesCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Destroy the value of a parameter in an environment.
pub fn projects_parameters_values_destroy(
    configuration: &mut configuration::Configuration,
    id: &str,
    parameter_pk: &str,
    project_pk: &str,
) -> Result<(), Error<ProjectsParametersValuesDestroyError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/{parameter_pk}/values/{id}/",
        configuration.base_path,
        id = id,
        parameter_pk = parameter_pk,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ProjectsParametersValuesDestroyError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

///          Retrieve previously set values of a parameter in one or all environments.         To see all the _effective_ values for a parameter across every environment,         use the Parameters API (see the `values` field).     
pub fn projects_parameters_values_list(
    configuration: &mut configuration::Configuration,
    parameter_pk: &str,
    project_pk: &str,
    environment: Option<&str>,
    mask_secrets: Option<bool>,
    page: Option<i32>,
    wrap: Option<bool>,
) -> Result<crate::models::PaginatedValueList, Error<ProjectsParametersValuesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/{parameter_pk}/values/",
        configuration.base_path,
        parameter_pk = parameter_pk,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = environment {
        local_var_req_builder =
            local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mask_secrets {
        local_var_req_builder =
            local_var_req_builder.query(&[("mask_secrets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wrap {
        local_var_req_builder =
            local_var_req_builder.query(&[("wrap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParametersValuesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update the value of a parameter in an environment.
pub fn projects_parameters_values_partial_update(
    configuration: &mut configuration::Configuration,
    id: &str,
    parameter_pk: &str,
    project_pk: &str,
    wrap: Option<bool>,
    patched_value: Option<crate::models::PatchedValue>,
) -> Result<crate::models::Value, Error<ProjectsParametersValuesPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/{parameter_pk}/values/{id}/",
        configuration.base_path,
        id = id,
        parameter_pk = parameter_pk,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = wrap {
        local_var_req_builder =
            local_var_req_builder.query(&[("wrap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&patched_value);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParametersValuesPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve the value of a parameter in an environment.
pub fn projects_parameters_values_retrieve(
    configuration: &mut configuration::Configuration,
    id: &str,
    parameter_pk: &str,
    project_pk: &str,
    mask_secrets: Option<bool>,
    wrap: Option<bool>,
) -> Result<crate::models::Value, Error<ProjectsParametersValuesRetrieveError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/{parameter_pk}/values/{id}/",
        configuration.base_path,
        id = id,
        parameter_pk = parameter_pk,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = mask_secrets {
        local_var_req_builder =
            local_var_req_builder.query(&[("mask_secrets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wrap {
        local_var_req_builder =
            local_var_req_builder.query(&[("wrap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParametersValuesRetrieveError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update the value of a parameter in an environment.
pub fn projects_parameters_values_update(
    configuration: &mut configuration::Configuration,
    id: &str,
    parameter_pk: &str,
    project_pk: &str,
    wrap: Option<bool>,
    value: Option<crate::models::Value>,
) -> Result<crate::models::Value, Error<ProjectsParametersValuesUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/parameters/{parameter_pk}/values/{id}/",
        configuration.base_path,
        id = id,
        parameter_pk = parameter_pk,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = wrap {
        local_var_req_builder =
            local_var_req_builder.query(&[("wrap", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&value);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsParametersValuesUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_partial_update(
    configuration: &mut configuration::Configuration,
    id: &str,
    patched_project: Option<crate::models::PatchedProject>,
) -> Result<crate::models::Project, Error<ProjectsPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&patched_project);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_retrieve(
    configuration: &mut configuration::Configuration,
    id: &str,
) -> Result<crate::models::Project, Error<ProjectsRetrieveError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsRetrieveError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Endpoint for previewing a template.
pub fn projects_template_preview_create(
    configuration: &mut configuration::Configuration,
    project_pk: &str,
    template_preview: crate::models::TemplatePreview,
    environment: Option<&str>,
    mask_secrets: Option<bool>,
) -> Result<crate::models::TemplatePreview, Error<ProjectsTemplatePreviewCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/template-preview/",
        configuration.base_path,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = environment {
        local_var_req_builder =
            local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mask_secrets {
        local_var_req_builder =
            local_var_req_builder.query(&[("mask_secrets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&template_preview);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsTemplatePreviewCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_templates_create(
    configuration: &mut configuration::Configuration,
    project_pk: &str,
    template_create: crate::models::TemplateCreate,
) -> Result<crate::models::TemplateCreate, Error<ProjectsTemplatesCreateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/templates/",
        configuration.base_path,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&template_create);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsTemplatesCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_templates_destroy(
    configuration: &mut configuration::Configuration,
    id: &str,
    project_pk: &str,
) -> Result<(), Error<ProjectsTemplatesDestroyError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/templates/{id}/",
        configuration.base_path,
        id = id,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ProjectsTemplatesDestroyError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_templates_list(
    configuration: &mut configuration::Configuration,
    project_pk: &str,
    name: Option<&str>,
    page: Option<i32>,
) -> Result<crate::models::PaginatedTemplateList, Error<ProjectsTemplatesListError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/templates/",
        configuration.base_path,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsTemplatesListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_templates_partial_update(
    configuration: &mut configuration::Configuration,
    id: &str,
    project_pk: &str,
    patched_template: Option<crate::models::PatchedTemplate>,
) -> Result<crate::models::Template, Error<ProjectsTemplatesPartialUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/templates/{id}/",
        configuration.base_path,
        id = id,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&patched_template);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsTemplatesPartialUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_templates_retrieve(
    configuration: &mut configuration::Configuration,
    id: &str,
    project_pk: &str,
    environment: Option<&str>,
    mask_secrets: Option<bool>,
) -> Result<crate::models::Template, Error<ProjectsTemplatesRetrieveError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/templates/{id}/",
        configuration.base_path,
        id = id,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = environment {
        local_var_req_builder =
            local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mask_secrets {
        local_var_req_builder =
            local_var_req_builder.query(&[("mask_secrets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsTemplatesRetrieveError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_templates_update(
    configuration: &mut configuration::Configuration,
    id: &str,
    project_pk: &str,
    template: crate::models::Template,
) -> Result<crate::models::Template, Error<ProjectsTemplatesUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/projects/{project_pk}/templates/{id}/",
        configuration.base_path,
        id = id,
        project_pk = project_pk
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&template);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsTemplatesUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub fn projects_update(
    configuration: &mut configuration::Configuration,
    id: &str,
    project: crate::models::Project,
) -> Result<crate::models::Project, Error<ProjectsUpdateError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/projects/{id}/", configuration.base_path, id = id);
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_cookie) = configuration.cookie {
        local_var_req_builder = local_var_req_builder.header("set-cookie", local_var_cookie)
    }
    local_var_req_builder = local_var_req_builder.json(&project);

    let local_var_req = local_var_req_builder.build()?;
    let mut local_var_resp = local_var_client.execute(local_var_req)?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text()?;
    if configuration.cookie.is_none() {
        if let Some(local_var_header) = local_var_resp.headers().get("set-cookie") {
            configuration.cookie = Some(local_var_header.to_str().unwrap().to_string());
        }
    }

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProjectsUpdateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
