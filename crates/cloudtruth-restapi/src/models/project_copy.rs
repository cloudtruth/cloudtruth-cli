/*
 * CloudTruth Management API
 *
 * CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cloudtruth.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProjectCopy {
    /// The project name.
    #[serde(rename = "name")]
    pub name: String,
    /// A description of the project.  You may find it helpful to document how this project is used to assist others when they need to maintain software that uses this content.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// When copying child Project, this indicates what name to use for each Project.  If no name is provided for a given child Project, a \"-1\" will be appended to its name.  Note that this name mapping can be used for Projects of any level of depth in the parent-child hierarchy.
    #[serde(
        rename = "child_project_names",
        skip_serializing_if = "Option::is_none"
    )]
    pub child_project_names: Option<::std::collections::HashMap<String, String>>,
    /// If true, copy child projects recursively.  If false, only copy the specified project.
    #[serde(rename = "recursive", skip_serializing_if = "Option::is_none")]
    pub recursive: Option<bool>,
    /// Project dependencies allow projects to be used for shared configuration, for example a database used by many applications needs to advertise its port number.  Projects can depend on another project which will add the parameters from the parent project into the current project.  All of the parameter names between the two projects must be unique.  When retrieving values or rendering templates, all of the parameters from the parent project will also be available in the current project.
    #[serde(rename = "depends_on", skip_serializing_if = "Option::is_none")]
    pub depends_on: Option<String>,
}

impl ProjectCopy {
    pub fn new(name: String) -> ProjectCopy {
        ProjectCopy {
            name,
            description: None,
            child_project_names: None,
            recursive: None,
            depends_on: None,
        }
    }
}
