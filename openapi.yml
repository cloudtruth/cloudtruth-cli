openapi: 3.0.3
info:
  title: CloudTruth Management API
  version: ''
  description: CloudTruth centralizes your parameters and secrets making them easier
    to manage and use.
  contact:
    name: CloudTruth Support
    email: support@cloudtruth.com
paths:
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/v1/environments/:
    get:
      operationId: environments_list
      description: ''
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: parent__name
        schema:
          type: string
      tags:
      - environments
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEnvironmentList'
          description: ''
    post:
      operationId: environments_create
      description: ''
      tags:
      - environments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Environment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Environment'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: ''
  /api/v1/environments/{id}/:
    get:
      operationId: environments_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this environment.
        required: true
      tags:
      - environments
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: ''
    put:
      operationId: environments_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this environment.
        required: true
      tags:
      - environments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Environment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Environment'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: ''
    patch:
      operationId: environments_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this environment.
        required: true
      tags:
      - environments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEnvironment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEnvironment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEnvironment'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
          description: ''
    delete:
      operationId: environments_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this environment.
        required: true
      tags:
      - environments
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/key/:
    get:
      operationId: key_list
      description: Lists encryption keys
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - key
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedKeyModelList'
          description: ''
    post:
      operationId: key_create
      description: Creates your encryption key
      tags:
      - key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/KeyModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KeyModel'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyModel'
          description: ''
  /api/v1/key/{id}/:
    patch:
      operationId: key_partial_update
      description: Given plaintext, encrypt with key.  Given ciphertext, decrypt with
        key
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this key.
        required: true
      tags:
      - key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedKeyEncryption'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedKeyEncryption'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedKeyEncryption'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyEncryption'
          description: ''
    delete:
      operationId: key_destroy
      description: Deletes your encryption key
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this key.
        required: true
      tags:
      - key
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/organizations/:
    get:
      operationId: organizations_list
      description: ''
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - organizations
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrganizationList'
          description: ''
    post:
      operationId: organizations_create
      description: ''
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Organization'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: ''
  /api/v1/organizations/{organization_pk}/memberships/:
    get:
      operationId: organizations_memberships_list
      description: ''
      parameters:
      - in: path
        name: organization_pk
        schema:
          type: string
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - organizations
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrgMembershipList'
          description: ''
    post:
      operationId: organizations_memberships_create
      description: ''
      parameters:
      - in: path
        name: organization_pk
        schema:
          type: string
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgMembership'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrgMembership'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrgMembership'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgMembership'
          description: ''
  /api/v1/organizations/{organization_pk}/memberships/{id}/:
    get:
      operationId: organizations_memberships_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: organization_pk
        schema:
          type: string
        required: true
      tags:
      - organizations
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgMembership'
          description: ''
    put:
      operationId: organizations_memberships_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: organization_pk
        schema:
          type: string
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgMembership'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrgMembership'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrgMembership'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgMembership'
          description: ''
    patch:
      operationId: organizations_memberships_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: organization_pk
        schema:
          type: string
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrgMembership'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrgMembership'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrgMembership'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgMembership'
          description: ''
    delete:
      operationId: organizations_memberships_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: organization_pk
        schema:
          type: string
        required: true
      tags:
      - organizations
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/organizations/{id}/:
    get:
      operationId: organizations_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this organization.
        required: true
      tags:
      - organizations
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: ''
    put:
      operationId: organizations_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this organization.
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Organization'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: ''
    patch:
      operationId: organizations_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this organization.
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrganization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrganization'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrganization'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: ''
    delete:
      operationId: organizations_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this organization.
        required: true
      tags:
      - organizations
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/:
    get:
      operationId: projects_list
      description: ''
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
    post:
      operationId: projects_create
      description: ''
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/v1/projects/{id}/:
    get:
      operationId: projects_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this project.
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: projects_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this project.
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    patch:
      operationId: projects_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this project.
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProject'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProject'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProject'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    delete:
      operationId: projects_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this project.
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/secrets/:
    get:
      operationId: secrets_list
      description: Lists secrets (without values), optionally filtered by project
        or project and environment
      parameters:
      - in: query
        name: environment
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: project
        schema:
          type: string
      tags:
      - secrets
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSecretModelList'
          description: ''
    post:
      operationId: secrets_create
      description: Creates a new secret
      parameters:
      - in: query
        name: wrapped
        schema:
          type: boolean
        description: Indicates if the provided secret value is wrapped.  Default is
          false.
      tags:
      - secrets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Secret'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Secret'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretModel'
          description: ''
  /api/v1/secrets/{id}/:
    get:
      operationId: secrets_retrieve
      description: Retrieves the value for the secret from Vault
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this secret.
        required: true
      - in: query
        name: wrap
        schema:
          type: boolean
        description: Indicates if the returned secret should be wrapped.  Default
          is false.
      tags:
      - secrets
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretValue'
          description: ''
    put:
      operationId: secrets_update
      description: Updates a secret, only the value may be changed
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this secret.
        required: true
      - in: query
        name: wrapped
        schema:
          type: boolean
        description: Indicates if the provided secret value is wrapped.  Default is
          false.
      tags:
      - secrets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Secret'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Secret'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretModel'
          description: ''
    patch:
      operationId: secrets_partial_update
      description: Updates a secret, only the value may be changed
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this secret.
        required: true
      - in: query
        name: wrapped
        schema:
          type: boolean
        description: Indicates if the provided secret value is wrapped.  Default is
          false.
      tags:
      - secrets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSecret'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSecret'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSecret'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretModel'
          description: ''
    delete:
      operationId: secrets_destroy
      description: Deletes a secret from Vault
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this secret.
        required: true
      tags:
      - secrets
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/:
    get:
      operationId: users_list
      description: ''
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: users_create
      description: ''
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /api/v1/users/{id}/:
    get:
      operationId: users_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/vault/:
    post:
      operationId: vault_create
      description: Creates an organization vault
      tags:
      - vault
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          description: No response body
components:
  schemas:
    Environment:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        name:
          type: string
          maxLength: 256
        description:
          type: string
        parent:
          type: string
          format: uri
          nullable: true
      required:
      - name
      - url
    KeyEncryption:
      type: object
      description: |-
        For serializing encryption/decryption requests.  Either plaintext
        OR encrypted must be provided.
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 256
        plaintext:
          type: string
        ciphertext:
          type: string
      required:
      - ciphertext
      - id
      - name
      - plaintext
      - url
    KeyModel:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 256
      required:
      - id
      - name
      - url
    OrgMembership:
      type: object
      description: |-
        A type of `ModelSerializer` that uses hyperlinked relationships with compound keys instead
        of primary key relationships.  Specifically:

        * A 'url' field is included instead of the 'id' field.
        * Relationships to other instances are hyperlinks, instead of primary keys.

        NOTE: this only works with DRF 3.1.0 and above.
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
        user:
          type: string
          format: uri
        organization:
          type: string
          format: uri
      required:
      - organization
      - role
      - url
      - user
    Organization:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 256
      required:
      - id
      - name
      - url
    PaginatedEnvironmentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
    PaginatedKeyModelList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/KeyModel'
    PaginatedOrgMembershipList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrgMembership'
    PaginatedOrganizationList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
    PaginatedProjectList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    PaginatedSecretModelList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SecretModel'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedEnvironment:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        name:
          type: string
          maxLength: 256
        description:
          type: string
        parent:
          type: string
          format: uri
          nullable: true
    PatchedKeyEncryption:
      type: object
      description: |-
        For serializing encryption/decryption requests.  Either plaintext
        OR encrypted must be provided.
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 256
        plaintext:
          type: string
        ciphertext:
          type: string
    PatchedOrgMembership:
      type: object
      description: |-
        A type of `ModelSerializer` that uses hyperlinked relationships with compound keys instead
        of primary key relationships.  Specifically:

        * A 'url' field is included instead of the 'id' field.
        * Relationships to other instances are hyperlinks, instead of primary keys.

        NOTE: this only works with DRF 3.1.0 and above.
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
        user:
          type: string
          format: uri
        organization:
          type: string
          format: uri
    PatchedOrganization:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 256
    PatchedProject:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        name:
          type: string
          maxLength: 256
        description:
          type: string
    PatchedSecret:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        project:
          type: string
          maxLength: 256
        environment:
          type: string
          maxLength: 256
        name:
          type: string
          pattern: ^[A-Za-z][A-Za-z0-9_-]*$
          maxLength: 256
        id:
          type: string
          format: uuid
          readOnly: true
        value:
          type: string
    PatchedUser:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        name:
          type: string
          maxLength: 256
        description:
          type: string
        picture_url:
          type: string
          format: uri
          maxLength: 200
    Project:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        name:
          type: string
          maxLength: 256
        description:
          type: string
      required:
      - name
      - url
    RoleEnum:
      enum:
      - OWNER
      - ADMIN
      - CONTRIB
      - VIEWER
      type: string
    Secret:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        project:
          type: string
          maxLength: 256
        environment:
          type: string
          maxLength: 256
        name:
          type: string
          pattern: ^[A-Za-z][A-Za-z0-9_-]*$
          maxLength: 256
        id:
          type: string
          format: uuid
          readOnly: true
        value:
          type: string
      required:
      - id
      - name
      - project
      - url
      - value
    SecretModel:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        project:
          type: string
          maxLength: 256
        environment:
          type: string
          maxLength: 256
        name:
          type: string
          pattern: ^[A-Za-z][A-Za-z0-9_-]*$
          maxLength: 256
        id:
          type: string
          format: uuid
          readOnly: true
      required:
      - id
      - name
      - project
      - url
    SecretValue:
      type: object
      properties:
        value:
          type: string
      required:
      - value
    User:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        name:
          type: string
          maxLength: 256
        description:
          type: string
        picture_url:
          type: string
          format: uri
          maxLength: 200
      required:
      - name
      - url
    UserCreate:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        auth0_id:
          type: string
          maxLength: 256
        name:
          type: string
          maxLength: 256
        description:
          type: string
        picture_url:
          type: string
          format: uri
          maxLength: 200
      required:
      - auth0_id
      - name
      - url
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: Session
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: Bearer
